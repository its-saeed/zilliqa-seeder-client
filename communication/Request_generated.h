// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_REQUEST_SEEDER_H_
#define FLATBUFFERS_GENERATED_REQUEST_SEEDER_H_

#include "flatbuffers/flatbuffers.h"

namespace Seeder {

struct HelloRequest;
struct HelloRequestBuilder;

struct ByeRequest;
struct ByeRequestBuilder;

struct PeerStatusRequest;
struct PeerStatusRequestBuilder;

struct GetElitedPeersRequest;

struct GetPeersByLastAliveRequest;

struct Request;
struct RequestBuilder;

enum RequestType : uint8_t {
  RequestType_NONE = 0,
  RequestType_HelloRequest = 1,
  RequestType_PeerStatusRequest = 2,
  RequestType_GetElitedPeersRequest = 3,
  RequestType_GetPeersByLastAliveRequest = 4,
  RequestType_ByeRequest = 5,
  RequestType_MIN = RequestType_NONE,
  RequestType_MAX = RequestType_ByeRequest
};

inline const RequestType (&EnumValuesRequestType())[6] {
  static const RequestType values[] = {
    RequestType_NONE,
    RequestType_HelloRequest,
    RequestType_PeerStatusRequest,
    RequestType_GetElitedPeersRequest,
    RequestType_GetPeersByLastAliveRequest,
    RequestType_ByeRequest
  };
  return values;
}

inline const char * const *EnumNamesRequestType() {
  static const char * const names[7] = {
    "NONE",
    "HelloRequest",
    "PeerStatusRequest",
    "GetElitedPeersRequest",
    "GetPeersByLastAliveRequest",
    "ByeRequest",
    nullptr
  };
  return names;
}

inline const char *EnumNameRequestType(RequestType e) {
  if (flatbuffers::IsOutRange(e, RequestType_NONE, RequestType_ByeRequest)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesRequestType()[index];
}

template<typename T> struct RequestTypeTraits {
  static const RequestType enum_value = RequestType_NONE;
};

template<> struct RequestTypeTraits<Seeder::HelloRequest> {
  static const RequestType enum_value = RequestType_HelloRequest;
};

template<> struct RequestTypeTraits<Seeder::PeerStatusRequest> {
  static const RequestType enum_value = RequestType_PeerStatusRequest;
};

template<> struct RequestTypeTraits<Seeder::GetElitedPeersRequest> {
  static const RequestType enum_value = RequestType_GetElitedPeersRequest;
};

template<> struct RequestTypeTraits<Seeder::GetPeersByLastAliveRequest> {
  static const RequestType enum_value = RequestType_GetPeersByLastAliveRequest;
};

template<> struct RequestTypeTraits<Seeder::ByeRequest> {
  static const RequestType enum_value = RequestType_ByeRequest;
};

bool VerifyRequestType(flatbuffers::Verifier &verifier, const void *obj, RequestType type);
bool VerifyRequestTypeVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(1) GetElitedPeersRequest FLATBUFFERS_FINAL_CLASS {
 private:
  int8_t number_of_peers_;

 public:
  GetElitedPeersRequest()
      : number_of_peers_(0) {
  }
  GetElitedPeersRequest(int8_t _number_of_peers)
      : number_of_peers_(flatbuffers::EndianScalar(_number_of_peers)) {
  }
  int8_t number_of_peers() const {
    return flatbuffers::EndianScalar(number_of_peers_);
  }
};
FLATBUFFERS_STRUCT_END(GetElitedPeersRequest, 1);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(8) GetPeersByLastAliveRequest FLATBUFFERS_FINAL_CLASS {
 private:
  int8_t number_of_peers_;
  int8_t padding0__;  int16_t padding1__;  int32_t padding2__;
  uint64_t last_alive_since_;

 public:
  GetPeersByLastAliveRequest()
      : number_of_peers_(0),
        padding0__(0),
        padding1__(0),
        padding2__(0),
        last_alive_since_(0) {
    (void)padding0__;
    (void)padding1__;
    (void)padding2__;
  }
  GetPeersByLastAliveRequest(int8_t _number_of_peers, uint64_t _last_alive_since)
      : number_of_peers_(flatbuffers::EndianScalar(_number_of_peers)),
        padding0__(0),
        padding1__(0),
        padding2__(0),
        last_alive_since_(flatbuffers::EndianScalar(_last_alive_since)) {
    (void)padding0__;
    (void)padding1__;
    (void)padding2__;
  }
  int8_t number_of_peers() const {
    return flatbuffers::EndianScalar(number_of_peers_);
  }
  uint64_t last_alive_since() const {
    return flatbuffers::EndianScalar(last_alive_since_);
  }
};
FLATBUFFERS_STRUCT_END(GetPeersByLastAliveRequest, 16);

struct HelloRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef HelloRequestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ADDRESS = 4
  };
  const flatbuffers::String *address() const {
    return GetPointer<const flatbuffers::String *>(VT_ADDRESS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_ADDRESS) &&
           verifier.VerifyString(address()) &&
           verifier.EndTable();
  }
};

struct HelloRequestBuilder {
  typedef HelloRequest Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_address(flatbuffers::Offset<flatbuffers::String> address) {
    fbb_.AddOffset(HelloRequest::VT_ADDRESS, address);
  }
  explicit HelloRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<HelloRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<HelloRequest>(end);
    fbb_.Required(o, HelloRequest::VT_ADDRESS);
    return o;
  }
};

inline flatbuffers::Offset<HelloRequest> CreateHelloRequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> address = 0) {
  HelloRequestBuilder builder_(_fbb);
  builder_.add_address(address);
  return builder_.Finish();
}

inline flatbuffers::Offset<HelloRequest> CreateHelloRequestDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *address = nullptr) {
  auto address__ = address ? _fbb.CreateString(address) : 0;
  return Seeder::CreateHelloRequest(
      _fbb,
      address__);
}

struct ByeRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ByeRequestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ADDRESS = 4
  };
  const flatbuffers::String *address() const {
    return GetPointer<const flatbuffers::String *>(VT_ADDRESS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_ADDRESS) &&
           verifier.VerifyString(address()) &&
           verifier.EndTable();
  }
};

struct ByeRequestBuilder {
  typedef ByeRequest Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_address(flatbuffers::Offset<flatbuffers::String> address) {
    fbb_.AddOffset(ByeRequest::VT_ADDRESS, address);
  }
  explicit ByeRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<ByeRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ByeRequest>(end);
    fbb_.Required(o, ByeRequest::VT_ADDRESS);
    return o;
  }
};

inline flatbuffers::Offset<ByeRequest> CreateByeRequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> address = 0) {
  ByeRequestBuilder builder_(_fbb);
  builder_.add_address(address);
  return builder_.Finish();
}

inline flatbuffers::Offset<ByeRequest> CreateByeRequestDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *address = nullptr) {
  auto address__ = address ? _fbb.CreateString(address) : 0;
  return Seeder::CreateByeRequest(
      _fbb,
      address__);
}

struct PeerStatusRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef PeerStatusRequestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ADDRESS = 4,
    VT_PEER_CURRENT_CONNECTIONS = 6,
    VT_LAST_ALIVE = 8
  };
  const flatbuffers::String *address() const {
    return GetPointer<const flatbuffers::String *>(VT_ADDRESS);
  }
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *peer_current_connections() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_PEER_CURRENT_CONNECTIONS);
  }
  uint64_t last_alive() const {
    return GetField<uint64_t>(VT_LAST_ALIVE, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_ADDRESS) &&
           verifier.VerifyString(address()) &&
           VerifyOffset(verifier, VT_PEER_CURRENT_CONNECTIONS) &&
           verifier.VerifyVector(peer_current_connections()) &&
           verifier.VerifyVectorOfStrings(peer_current_connections()) &&
           VerifyField<uint64_t>(verifier, VT_LAST_ALIVE) &&
           verifier.EndTable();
  }
};

struct PeerStatusRequestBuilder {
  typedef PeerStatusRequest Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_address(flatbuffers::Offset<flatbuffers::String> address) {
    fbb_.AddOffset(PeerStatusRequest::VT_ADDRESS, address);
  }
  void add_peer_current_connections(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> peer_current_connections) {
    fbb_.AddOffset(PeerStatusRequest::VT_PEER_CURRENT_CONNECTIONS, peer_current_connections);
  }
  void add_last_alive(uint64_t last_alive) {
    fbb_.AddElement<uint64_t>(PeerStatusRequest::VT_LAST_ALIVE, last_alive, 0);
  }
  explicit PeerStatusRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<PeerStatusRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<PeerStatusRequest>(end);
    fbb_.Required(o, PeerStatusRequest::VT_ADDRESS);
    return o;
  }
};

inline flatbuffers::Offset<PeerStatusRequest> CreatePeerStatusRequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> address = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> peer_current_connections = 0,
    uint64_t last_alive = 0) {
  PeerStatusRequestBuilder builder_(_fbb);
  builder_.add_last_alive(last_alive);
  builder_.add_peer_current_connections(peer_current_connections);
  builder_.add_address(address);
  return builder_.Finish();
}

inline flatbuffers::Offset<PeerStatusRequest> CreatePeerStatusRequestDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *address = nullptr,
    const std::vector<flatbuffers::Offset<flatbuffers::String>> *peer_current_connections = nullptr,
    uint64_t last_alive = 0) {
  auto address__ = address ? _fbb.CreateString(address) : 0;
  auto peer_current_connections__ = peer_current_connections ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*peer_current_connections) : 0;
  return Seeder::CreatePeerStatusRequest(
      _fbb,
      address__,
      peer_current_connections__,
      last_alive);
}

struct Request FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef RequestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_REQUEST_TYPE = 6,
    VT_REQUEST = 8
  };
  uint16_t id() const {
    return GetField<uint16_t>(VT_ID, 0);
  }
  Seeder::RequestType request_type() const {
    return static_cast<Seeder::RequestType>(GetField<uint8_t>(VT_REQUEST_TYPE, 0));
  }
  const void *request() const {
    return GetPointer<const void *>(VT_REQUEST);
  }
  template<typename T> const T *request_as() const;
  const Seeder::HelloRequest *request_as_HelloRequest() const {
    return request_type() == Seeder::RequestType_HelloRequest ? static_cast<const Seeder::HelloRequest *>(request()) : nullptr;
  }
  const Seeder::PeerStatusRequest *request_as_PeerStatusRequest() const {
    return request_type() == Seeder::RequestType_PeerStatusRequest ? static_cast<const Seeder::PeerStatusRequest *>(request()) : nullptr;
  }
  const Seeder::GetElitedPeersRequest *request_as_GetElitedPeersRequest() const {
    return request_type() == Seeder::RequestType_GetElitedPeersRequest ? static_cast<const Seeder::GetElitedPeersRequest *>(request()) : nullptr;
  }
  const Seeder::GetPeersByLastAliveRequest *request_as_GetPeersByLastAliveRequest() const {
    return request_type() == Seeder::RequestType_GetPeersByLastAliveRequest ? static_cast<const Seeder::GetPeersByLastAliveRequest *>(request()) : nullptr;
  }
  const Seeder::ByeRequest *request_as_ByeRequest() const {
    return request_type() == Seeder::RequestType_ByeRequest ? static_cast<const Seeder::ByeRequest *>(request()) : nullptr;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint16_t>(verifier, VT_ID) &&
           VerifyField<uint8_t>(verifier, VT_REQUEST_TYPE) &&
           VerifyOffsetRequired(verifier, VT_REQUEST) &&
           VerifyRequestType(verifier, request(), request_type()) &&
           verifier.EndTable();
  }
};

template<> inline const Seeder::HelloRequest *Request::request_as<Seeder::HelloRequest>() const {
  return request_as_HelloRequest();
}

template<> inline const Seeder::PeerStatusRequest *Request::request_as<Seeder::PeerStatusRequest>() const {
  return request_as_PeerStatusRequest();
}

template<> inline const Seeder::GetElitedPeersRequest *Request::request_as<Seeder::GetElitedPeersRequest>() const {
  return request_as_GetElitedPeersRequest();
}

template<> inline const Seeder::GetPeersByLastAliveRequest *Request::request_as<Seeder::GetPeersByLastAliveRequest>() const {
  return request_as_GetPeersByLastAliveRequest();
}

template<> inline const Seeder::ByeRequest *Request::request_as<Seeder::ByeRequest>() const {
  return request_as_ByeRequest();
}

struct RequestBuilder {
  typedef Request Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(uint16_t id) {
    fbb_.AddElement<uint16_t>(Request::VT_ID, id, 0);
  }
  void add_request_type(Seeder::RequestType request_type) {
    fbb_.AddElement<uint8_t>(Request::VT_REQUEST_TYPE, static_cast<uint8_t>(request_type), 0);
  }
  void add_request(flatbuffers::Offset<void> request) {
    fbb_.AddOffset(Request::VT_REQUEST, request);
  }
  explicit RequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Request> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Request>(end);
    fbb_.Required(o, Request::VT_REQUEST);
    return o;
  }
};

inline flatbuffers::Offset<Request> CreateRequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint16_t id = 0,
    Seeder::RequestType request_type = Seeder::RequestType_NONE,
    flatbuffers::Offset<void> request = 0) {
  RequestBuilder builder_(_fbb);
  builder_.add_request(request);
  builder_.add_id(id);
  builder_.add_request_type(request_type);
  return builder_.Finish();
}

inline bool VerifyRequestType(flatbuffers::Verifier &verifier, const void *obj, RequestType type) {
  switch (type) {
    case RequestType_NONE: {
      return true;
    }
    case RequestType_HelloRequest: {
      auto ptr = reinterpret_cast<const Seeder::HelloRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case RequestType_PeerStatusRequest: {
      auto ptr = reinterpret_cast<const Seeder::PeerStatusRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case RequestType_GetElitedPeersRequest: {
      return verifier.Verify<Seeder::GetElitedPeersRequest>(static_cast<const uint8_t *>(obj), 0);
    }
    case RequestType_GetPeersByLastAliveRequest: {
      return verifier.Verify<Seeder::GetPeersByLastAliveRequest>(static_cast<const uint8_t *>(obj), 0);
    }
    case RequestType_ByeRequest: {
      auto ptr = reinterpret_cast<const Seeder::ByeRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyRequestTypeVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyRequestType(
        verifier,  values->Get(i), types->GetEnum<RequestType>(i))) {
      return false;
    }
  }
  return true;
}

inline const Seeder::Request *GetRequest(const void *buf) {
  return flatbuffers::GetRoot<Seeder::Request>(buf);
}

inline const Seeder::Request *GetSizePrefixedRequest(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Seeder::Request>(buf);
}

inline bool VerifyRequestBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Seeder::Request>(nullptr);
}

inline bool VerifySizePrefixedRequestBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Seeder::Request>(nullptr);
}

inline void FinishRequestBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Seeder::Request> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedRequestBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Seeder::Request> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Seeder

#endif  // FLATBUFFERS_GENERATED_REQUEST_SEEDER_H_
